apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 15m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 42.0.3
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
  install:
    createNamespace: true
    remediation:
      retries: 5
  upgrade:
    remediation:
      retries: 5
  values:
    alertmanager:
    #   config:
    #     global:
    #       resolve_timeout: 5m
    #     receivers:
    #       - name: "null"
    #       - name: "discord"
    #         slack_configs:
    #           - channel: "#prometheus"
    #             icon_url: https://avatars3.githubusercontent.com/u/3380462
    #             username: "Prometheus"
    #             send_resolved: true
    #             title: |-
    #               [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }}{{ else }}{{ .CommonLabels.alertname }}{{ end }}
    #             text: >-
    #               {{ range .Alerts -}}
    #                 **Alert:** {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}
    #               **Description:** {{ if ne .Annotations.description ""}}{{ .Annotations.description }}{{else}}N/A{{ end }}
    #               **Details:**
    #                 {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
    #                 {{ end }}
    #               {{ end }}
    #     route:
    #       group_by: ["alertname", "job"]
    #       group_wait: 30s
    #       group_interval: 5m
    #       repeat_interval: 6h
    #       receiver: "discord"
    #       routes:
    #         - receiver: "null"
    #           matchers:
    #             - alertname =~ "InfoInhibitor|Watchdog"
    #         - receiver: "discord"
    #           matchers:
    #             - severity =~ "warning|critical"
    #           continue: true
    #     inhibit_rules:
    #       - source_matchers:
    #           - severity = "critical"
    #         target_matchers:
    #           - severity = "warning"
    #         equal: ["alertname", "namespace"]
      # ingress:
      #   enabled: true
      #   pathType: Prefix
      #   ingressClassName: "nginx"
      #   annotations:
      #     cert-manager.io/cluster-issuer: "letsencrypt-staging"
      #   hosts:
      #     - &host "alert-manager.${SECRET_DOMAIN}"
      #   tls:
      #     - hosts:
      #         - *host
      #       secretName: "alert-manager-tls"
      alertmanagerSpec:
        replicas: 1
        podAntiAffinity: hard
        storage:
          volumeClaimTemplate:
            spec:
              resources:
                requests:
                  storage: 1Gi
    kube-state-metrics:
      metricLabelsAllowlist:
        - "persistentvolumeclaims=[*]"
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node
    grafana:
      enabled: true
      #forceDeployDashboards: true
      sidecar:
        datasources:
          defaultDatasourceEnabled: true
        dashboards:
          multicluster:
            etcd:
              enabled: false
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
    kubeApiServer:
      enabled: true
    kubeControllerManager:
      enabled: true
      service:
        selector:
          component: kube-controller-manager
    kubeScheduler:
      enabled: true
      service:
        selector:
          component: kube-scheduler
    kubeProxy:
      enabled: true
      # endpoints:
      #   - 192.168.0.70
      #   - 192.168.0.71
      #   - 192.168.0.72
    coreDns:
      service:
        selector:
          k8s-app: kube-dns
    kubeEtcd:
      enabled: true
      service:
        selector:
          component: etcd
        enabled: true
        port: 2381
        targetPort: 2381
    prometheus:
      # ingress:
      #   enabled: true
      #   pathType: Prefix
      #   ingressClassName: "nginx"
      #   hosts:
      #     - &host "prometheus.${SECRET_DOMAIN}"
      #   tls:
      #     - hosts:
      #         - *host
      prometheusSpec:
        replicas: 1
        replicaExternalLabelName: __replica__
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 7d
        retentionSize: 10GB
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              resources:
                requests:
                  storage: 15Gi
  # valuesFrom:
  #   - kind: Secret
  #     name: discord-webhook
  #     valuesKey: ALERT_MANAGER_DISCORD_WEBHOOK
  #     targetPath: alertmanager.config.global.slack_api_url
  #     optional: false